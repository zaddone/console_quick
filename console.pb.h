// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: console.proto

#ifndef PROTOBUF_console_2eproto__INCLUDED
#define PROTOBUF_console_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_console_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLastTimeImpl();
void InitDefaultsLastTime();
void InitDefaultsInstrumentSimpleImpl();
void InitDefaultsInstrumentSimple();
void InitDefaultsInstrumentReplyImpl();
void InitDefaultsInstrumentReply();
void InitDefaultsRequestImpl();
void InitDefaultsRequest();
void InitDefaultsInstrumentImpl();
void InitDefaultsInstrument();
inline void InitDefaults() {
  InitDefaultsLastTime();
  InitDefaultsInstrumentSimple();
  InitDefaultsInstrumentReply();
  InitDefaultsRequest();
  InitDefaultsInstrument();
}
}  // namespace protobuf_console_2eproto
namespace console {
class Instrument;
class InstrumentDefaultTypeInternal;
extern InstrumentDefaultTypeInternal _Instrument_default_instance_;
class InstrumentReply;
class InstrumentReplyDefaultTypeInternal;
extern InstrumentReplyDefaultTypeInternal _InstrumentReply_default_instance_;
class InstrumentSimple;
class InstrumentSimpleDefaultTypeInternal;
extern InstrumentSimpleDefaultTypeInternal _InstrumentSimple_default_instance_;
class LastTime;
class LastTimeDefaultTypeInternal;
extern LastTimeDefaultTypeInternal _LastTime_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace console
namespace console {

// ===================================================================

class LastTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:console.LastTime) */ {
 public:
  LastTime();
  virtual ~LastTime();

  LastTime(const LastTime& from);

  inline LastTime& operator=(const LastTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LastTime(LastTime&& from) noexcept
    : LastTime() {
    *this = ::std::move(from);
  }

  inline LastTime& operator=(LastTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LastTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LastTime* internal_default_instance() {
    return reinterpret_cast<const LastTime*>(
               &_LastTime_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LastTime* other);
  friend void swap(LastTime& a, LastTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LastTime* New() const PROTOBUF_FINAL { return New(NULL); }

  LastTime* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LastTime& from);
  void MergeFrom(const LastTime& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LastTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Tag = 1;
  void clear_tag();
  static const int kTagFieldNumber = 1;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // int64 time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // int64 Scale = 3;
  void clear_scale();
  static const int kScaleFieldNumber = 3;
  ::google::protobuf::int64 scale() const;
  void set_scale(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:console.LastTime)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 scale_;
  mutable int _cached_size_;
  friend struct ::protobuf_console_2eproto::TableStruct;
  friend void ::protobuf_console_2eproto::InitDefaultsLastTimeImpl();
};
// -------------------------------------------------------------------

class InstrumentSimple : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:console.InstrumentSimple) */ {
 public:
  InstrumentSimple();
  virtual ~InstrumentSimple();

  InstrumentSimple(const InstrumentSimple& from);

  inline InstrumentSimple& operator=(const InstrumentSimple& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InstrumentSimple(InstrumentSimple&& from) noexcept
    : InstrumentSimple() {
    *this = ::std::move(from);
  }

  inline InstrumentSimple& operator=(InstrumentSimple&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstrumentSimple& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentSimple* internal_default_instance() {
    return reinterpret_cast<const InstrumentSimple*>(
               &_InstrumentSimple_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(InstrumentSimple* other);
  friend void swap(InstrumentSimple& a, InstrumentSimple& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstrumentSimple* New() const PROTOBUF_FINAL { return New(NULL); }

  InstrumentSimple* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InstrumentSimple& from);
  void MergeFrom(const InstrumentSimple& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InstrumentSimple* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:console.InstrumentSimple)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_console_2eproto::TableStruct;
  friend void ::protobuf_console_2eproto::InitDefaultsInstrumentSimpleImpl();
};
// -------------------------------------------------------------------

class InstrumentReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:console.InstrumentReply) */ {
 public:
  InstrumentReply();
  virtual ~InstrumentReply();

  InstrumentReply(const InstrumentReply& from);

  inline InstrumentReply& operator=(const InstrumentReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InstrumentReply(InstrumentReply&& from) noexcept
    : InstrumentReply() {
    *this = ::std::move(from);
  }

  inline InstrumentReply& operator=(InstrumentReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstrumentReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentReply* internal_default_instance() {
    return reinterpret_cast<const InstrumentReply*>(
               &_InstrumentReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(InstrumentReply* other);
  friend void swap(InstrumentReply& a, InstrumentReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstrumentReply* New() const PROTOBUF_FINAL { return New(NULL); }

  InstrumentReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InstrumentReply& from);
  void MergeFrom(const InstrumentReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InstrumentReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool State = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  bool state() const;
  void set_state(bool value);

  // @@protoc_insertion_point(class_scope:console.InstrumentReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool state_;
  mutable int _cached_size_;
  friend struct ::protobuf_console_2eproto::TableStruct;
  friend void ::protobuf_console_2eproto::InitDefaultsInstrumentReplyImpl();
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:console.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:console.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_console_2eproto::TableStruct;
  friend void ::protobuf_console_2eproto::InitDefaultsRequestImpl();
};
// -------------------------------------------------------------------

class Instrument : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:console.Instrument) */ {
 public:
  Instrument();
  virtual ~Instrument();

  Instrument(const Instrument& from);

  inline Instrument& operator=(const Instrument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Instrument(Instrument&& from) noexcept
    : Instrument() {
    *this = ::std::move(from);
  }

  inline Instrument& operator=(Instrument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Instrument& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Instrument* internal_default_instance() {
    return reinterpret_cast<const Instrument*>(
               &_Instrument_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Instrument* other);
  friend void swap(Instrument& a, Instrument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Instrument* New() const PROTOBUF_FINAL { return New(NULL); }

  Instrument* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Instrument& from);
  void MergeFrom(const Instrument& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Instrument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Type = 11;
  void clear_type();
  static const int kTypeFieldNumber = 11;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // double DisplayPrecision = 2;
  void clear_displayprecision();
  static const int kDisplayPrecisionFieldNumber = 2;
  double displayprecision() const;
  void set_displayprecision(double value);

  // double MarginRate = 3;
  void clear_marginrate();
  static const int kMarginRateFieldNumber = 3;
  double marginrate() const;
  void set_marginrate(double value);

  // double MaximumOrderUnits = 4;
  void clear_maximumorderunits();
  static const int kMaximumOrderUnitsFieldNumber = 4;
  double maximumorderunits() const;
  void set_maximumorderunits(double value);

  // double MaximumPositionSize = 5;
  void clear_maximumpositionsize();
  static const int kMaximumPositionSizeFieldNumber = 5;
  double maximumpositionsize() const;
  void set_maximumpositionsize(double value);

  // double MaximumTrailingStopDistance = 6;
  void clear_maximumtrailingstopdistance();
  static const int kMaximumTrailingStopDistanceFieldNumber = 6;
  double maximumtrailingstopdistance() const;
  void set_maximumtrailingstopdistance(double value);

  // double MinimumTradeSize = 7;
  void clear_minimumtradesize();
  static const int kMinimumTradeSizeFieldNumber = 7;
  double minimumtradesize() const;
  void set_minimumtradesize(double value);

  // double MinimumTrailingStopDistance = 8;
  void clear_minimumtrailingstopdistance();
  static const int kMinimumTrailingStopDistanceFieldNumber = 8;
  double minimumtrailingstopdistance() const;
  void set_minimumtrailingstopdistance(double value);

  // double PipLocation = 9;
  void clear_piplocation();
  static const int kPipLocationFieldNumber = 9;
  double piplocation() const;
  void set_piplocation(double value);

  // double TradeUnitsPrecision = 10;
  void clear_tradeunitsprecision();
  static const int kTradeUnitsPrecisionFieldNumber = 10;
  double tradeunitsprecision() const;
  void set_tradeunitsprecision(double value);

  // bool Online = 12;
  void clear_online();
  static const int kOnlineFieldNumber = 12;
  bool online() const;
  void set_online(bool value);

  // @@protoc_insertion_point(class_scope:console.Instrument)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  double displayprecision_;
  double marginrate_;
  double maximumorderunits_;
  double maximumpositionsize_;
  double maximumtrailingstopdistance_;
  double minimumtradesize_;
  double minimumtrailingstopdistance_;
  double piplocation_;
  double tradeunitsprecision_;
  bool online_;
  mutable int _cached_size_;
  friend struct ::protobuf_console_2eproto::TableStruct;
  friend void ::protobuf_console_2eproto::InitDefaultsInstrumentImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LastTime

// string Tag = 1;
inline void LastTime::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LastTime::tag() const {
  // @@protoc_insertion_point(field_get:console.LastTime.Tag)
  return tag_.GetNoArena();
}
inline void LastTime::set_tag(const ::std::string& value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:console.LastTime.Tag)
}
#if LANG_CXX11
inline void LastTime::set_tag(::std::string&& value) {
  
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:console.LastTime.Tag)
}
#endif
inline void LastTime::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:console.LastTime.Tag)
}
inline void LastTime::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:console.LastTime.Tag)
}
inline ::std::string* LastTime::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:console.LastTime.Tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LastTime::release_tag() {
  // @@protoc_insertion_point(field_release:console.LastTime.Tag)
  
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LastTime::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:console.LastTime.Tag)
}

// int64 time = 2;
inline void LastTime::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LastTime::time() const {
  // @@protoc_insertion_point(field_get:console.LastTime.time)
  return time_;
}
inline void LastTime::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:console.LastTime.time)
}

// int64 Scale = 3;
inline void LastTime::clear_scale() {
  scale_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LastTime::scale() const {
  // @@protoc_insertion_point(field_get:console.LastTime.Scale)
  return scale_;
}
inline void LastTime::set_scale(::google::protobuf::int64 value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:console.LastTime.Scale)
}

// -------------------------------------------------------------------

// InstrumentSimple

// string Name = 1;
inline void InstrumentSimple::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentSimple::name() const {
  // @@protoc_insertion_point(field_get:console.InstrumentSimple.Name)
  return name_.GetNoArena();
}
inline void InstrumentSimple::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:console.InstrumentSimple.Name)
}
#if LANG_CXX11
inline void InstrumentSimple::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:console.InstrumentSimple.Name)
}
#endif
inline void InstrumentSimple::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:console.InstrumentSimple.Name)
}
inline void InstrumentSimple::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:console.InstrumentSimple.Name)
}
inline ::std::string* InstrumentSimple::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:console.InstrumentSimple.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentSimple::release_name() {
  // @@protoc_insertion_point(field_release:console.InstrumentSimple.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentSimple::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:console.InstrumentSimple.Name)
}

// -------------------------------------------------------------------

// InstrumentReply

// bool State = 1;
inline void InstrumentReply::clear_state() {
  state_ = false;
}
inline bool InstrumentReply::state() const {
  // @@protoc_insertion_point(field_get:console.InstrumentReply.State)
  return state_;
}
inline void InstrumentReply::set_state(bool value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:console.InstrumentReply.State)
}

// -------------------------------------------------------------------

// Request

// -------------------------------------------------------------------

// Instrument

// string Name = 1;
inline void Instrument::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instrument::name() const {
  // @@protoc_insertion_point(field_get:console.Instrument.Name)
  return name_.GetNoArena();
}
inline void Instrument::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:console.Instrument.Name)
}
#if LANG_CXX11
inline void Instrument::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:console.Instrument.Name)
}
#endif
inline void Instrument::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:console.Instrument.Name)
}
inline void Instrument::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:console.Instrument.Name)
}
inline ::std::string* Instrument::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:console.Instrument.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instrument::release_name() {
  // @@protoc_insertion_point(field_release:console.Instrument.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instrument::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:console.Instrument.Name)
}

// double DisplayPrecision = 2;
inline void Instrument::clear_displayprecision() {
  displayprecision_ = 0;
}
inline double Instrument::displayprecision() const {
  // @@protoc_insertion_point(field_get:console.Instrument.DisplayPrecision)
  return displayprecision_;
}
inline void Instrument::set_displayprecision(double value) {
  
  displayprecision_ = value;
  // @@protoc_insertion_point(field_set:console.Instrument.DisplayPrecision)
}

// double MarginRate = 3;
inline void Instrument::clear_marginrate() {
  marginrate_ = 0;
}
inline double Instrument::marginrate() const {
  // @@protoc_insertion_point(field_get:console.Instrument.MarginRate)
  return marginrate_;
}
inline void Instrument::set_marginrate(double value) {
  
  marginrate_ = value;
  // @@protoc_insertion_point(field_set:console.Instrument.MarginRate)
}

// double MaximumOrderUnits = 4;
inline void Instrument::clear_maximumorderunits() {
  maximumorderunits_ = 0;
}
inline double Instrument::maximumorderunits() const {
  // @@protoc_insertion_point(field_get:console.Instrument.MaximumOrderUnits)
  return maximumorderunits_;
}
inline void Instrument::set_maximumorderunits(double value) {
  
  maximumorderunits_ = value;
  // @@protoc_insertion_point(field_set:console.Instrument.MaximumOrderUnits)
}

// double MaximumPositionSize = 5;
inline void Instrument::clear_maximumpositionsize() {
  maximumpositionsize_ = 0;
}
inline double Instrument::maximumpositionsize() const {
  // @@protoc_insertion_point(field_get:console.Instrument.MaximumPositionSize)
  return maximumpositionsize_;
}
inline void Instrument::set_maximumpositionsize(double value) {
  
  maximumpositionsize_ = value;
  // @@protoc_insertion_point(field_set:console.Instrument.MaximumPositionSize)
}

// double MaximumTrailingStopDistance = 6;
inline void Instrument::clear_maximumtrailingstopdistance() {
  maximumtrailingstopdistance_ = 0;
}
inline double Instrument::maximumtrailingstopdistance() const {
  // @@protoc_insertion_point(field_get:console.Instrument.MaximumTrailingStopDistance)
  return maximumtrailingstopdistance_;
}
inline void Instrument::set_maximumtrailingstopdistance(double value) {
  
  maximumtrailingstopdistance_ = value;
  // @@protoc_insertion_point(field_set:console.Instrument.MaximumTrailingStopDistance)
}

// double MinimumTradeSize = 7;
inline void Instrument::clear_minimumtradesize() {
  minimumtradesize_ = 0;
}
inline double Instrument::minimumtradesize() const {
  // @@protoc_insertion_point(field_get:console.Instrument.MinimumTradeSize)
  return minimumtradesize_;
}
inline void Instrument::set_minimumtradesize(double value) {
  
  minimumtradesize_ = value;
  // @@protoc_insertion_point(field_set:console.Instrument.MinimumTradeSize)
}

// double MinimumTrailingStopDistance = 8;
inline void Instrument::clear_minimumtrailingstopdistance() {
  minimumtrailingstopdistance_ = 0;
}
inline double Instrument::minimumtrailingstopdistance() const {
  // @@protoc_insertion_point(field_get:console.Instrument.MinimumTrailingStopDistance)
  return minimumtrailingstopdistance_;
}
inline void Instrument::set_minimumtrailingstopdistance(double value) {
  
  minimumtrailingstopdistance_ = value;
  // @@protoc_insertion_point(field_set:console.Instrument.MinimumTrailingStopDistance)
}

// double PipLocation = 9;
inline void Instrument::clear_piplocation() {
  piplocation_ = 0;
}
inline double Instrument::piplocation() const {
  // @@protoc_insertion_point(field_get:console.Instrument.PipLocation)
  return piplocation_;
}
inline void Instrument::set_piplocation(double value) {
  
  piplocation_ = value;
  // @@protoc_insertion_point(field_set:console.Instrument.PipLocation)
}

// double TradeUnitsPrecision = 10;
inline void Instrument::clear_tradeunitsprecision() {
  tradeunitsprecision_ = 0;
}
inline double Instrument::tradeunitsprecision() const {
  // @@protoc_insertion_point(field_get:console.Instrument.TradeUnitsPrecision)
  return tradeunitsprecision_;
}
inline void Instrument::set_tradeunitsprecision(double value) {
  
  tradeunitsprecision_ = value;
  // @@protoc_insertion_point(field_set:console.Instrument.TradeUnitsPrecision)
}

// string Type = 11;
inline void Instrument::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instrument::type() const {
  // @@protoc_insertion_point(field_get:console.Instrument.Type)
  return type_.GetNoArena();
}
inline void Instrument::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:console.Instrument.Type)
}
#if LANG_CXX11
inline void Instrument::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:console.Instrument.Type)
}
#endif
inline void Instrument::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:console.Instrument.Type)
}
inline void Instrument::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:console.Instrument.Type)
}
inline ::std::string* Instrument::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:console.Instrument.Type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instrument::release_type() {
  // @@protoc_insertion_point(field_release:console.Instrument.Type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instrument::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:console.Instrument.Type)
}

// bool Online = 12;
inline void Instrument::clear_online() {
  online_ = false;
}
inline bool Instrument::online() const {
  // @@protoc_insertion_point(field_get:console.Instrument.Online)
  return online_;
}
inline void Instrument::set_online(bool value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:console.Instrument.Online)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace console

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_console_2eproto__INCLUDED
