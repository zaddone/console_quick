// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: console.proto
#ifndef GRPC_console_2eproto__INCLUDED
#define GRPC_console_2eproto__INCLUDED

#include "console.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace console {

class Greeter final {
 public:
  static constexpr char const* service_full_name() {
    return "console.Greeter";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // rpc GetAccountId(Request) returns (stream AccountId){}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::console::Instrument>> ListInstrument(::grpc::ClientContext* context, const ::console::Request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::console::Instrument>>(ListInstrumentRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::console::Instrument>> AsyncListInstrument(::grpc::ClientContext* context, const ::console::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::console::Instrument>>(AsyncListInstrumentRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::console::Instrument>> PrepareAsyncListInstrument(::grpc::ClientContext* context, const ::console::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::console::Instrument>>(PrepareAsyncListInstrumentRaw(context, request, cq));
    }
    virtual ::grpc::Status StartInstrument(::grpc::ClientContext* context, const ::console::InstrumentSimple& request, ::console::InstrumentReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::console::InstrumentReply>> AsyncStartInstrument(::grpc::ClientContext* context, const ::console::InstrumentSimple& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::console::InstrumentReply>>(AsyncStartInstrumentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::console::InstrumentReply>> PrepareAsyncStartInstrument(::grpc::ClientContext* context, const ::console::InstrumentSimple& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::console::InstrumentReply>>(PrepareAsyncStartInstrumentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::console::LastTime>> GetLastTime(::grpc::ClientContext* context, const ::console::InstrumentSimple& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::console::LastTime>>(GetLastTimeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::console::LastTime>> AsyncGetLastTime(::grpc::ClientContext* context, const ::console::InstrumentSimple& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::console::LastTime>>(AsyncGetLastTimeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::console::LastTime>> PrepareAsyncGetLastTime(::grpc::ClientContext* context, const ::console::InstrumentSimple& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::console::LastTime>>(PrepareAsyncGetLastTimeRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::console::Instrument>* ListInstrumentRaw(::grpc::ClientContext* context, const ::console::Request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::console::Instrument>* AsyncListInstrumentRaw(::grpc::ClientContext* context, const ::console::Request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::console::Instrument>* PrepareAsyncListInstrumentRaw(::grpc::ClientContext* context, const ::console::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::console::InstrumentReply>* AsyncStartInstrumentRaw(::grpc::ClientContext* context, const ::console::InstrumentSimple& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::console::InstrumentReply>* PrepareAsyncStartInstrumentRaw(::grpc::ClientContext* context, const ::console::InstrumentSimple& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::console::LastTime>* GetLastTimeRaw(::grpc::ClientContext* context, const ::console::InstrumentSimple& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::console::LastTime>* AsyncGetLastTimeRaw(::grpc::ClientContext* context, const ::console::InstrumentSimple& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::console::LastTime>* PrepareAsyncGetLastTimeRaw(::grpc::ClientContext* context, const ::console::InstrumentSimple& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::console::Instrument>> ListInstrument(::grpc::ClientContext* context, const ::console::Request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::console::Instrument>>(ListInstrumentRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::console::Instrument>> AsyncListInstrument(::grpc::ClientContext* context, const ::console::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::console::Instrument>>(AsyncListInstrumentRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::console::Instrument>> PrepareAsyncListInstrument(::grpc::ClientContext* context, const ::console::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::console::Instrument>>(PrepareAsyncListInstrumentRaw(context, request, cq));
    }
    ::grpc::Status StartInstrument(::grpc::ClientContext* context, const ::console::InstrumentSimple& request, ::console::InstrumentReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::console::InstrumentReply>> AsyncStartInstrument(::grpc::ClientContext* context, const ::console::InstrumentSimple& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::console::InstrumentReply>>(AsyncStartInstrumentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::console::InstrumentReply>> PrepareAsyncStartInstrument(::grpc::ClientContext* context, const ::console::InstrumentSimple& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::console::InstrumentReply>>(PrepareAsyncStartInstrumentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::console::LastTime>> GetLastTime(::grpc::ClientContext* context, const ::console::InstrumentSimple& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::console::LastTime>>(GetLastTimeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::console::LastTime>> AsyncGetLastTime(::grpc::ClientContext* context, const ::console::InstrumentSimple& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::console::LastTime>>(AsyncGetLastTimeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::console::LastTime>> PrepareAsyncGetLastTime(::grpc::ClientContext* context, const ::console::InstrumentSimple& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::console::LastTime>>(PrepareAsyncGetLastTimeRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReader< ::console::Instrument>* ListInstrumentRaw(::grpc::ClientContext* context, const ::console::Request& request) override;
    ::grpc::ClientAsyncReader< ::console::Instrument>* AsyncListInstrumentRaw(::grpc::ClientContext* context, const ::console::Request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::console::Instrument>* PrepareAsyncListInstrumentRaw(::grpc::ClientContext* context, const ::console::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::console::InstrumentReply>* AsyncStartInstrumentRaw(::grpc::ClientContext* context, const ::console::InstrumentSimple& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::console::InstrumentReply>* PrepareAsyncStartInstrumentRaw(::grpc::ClientContext* context, const ::console::InstrumentSimple& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::console::LastTime>* GetLastTimeRaw(::grpc::ClientContext* context, const ::console::InstrumentSimple& request) override;
    ::grpc::ClientAsyncReader< ::console::LastTime>* AsyncGetLastTimeRaw(::grpc::ClientContext* context, const ::console::InstrumentSimple& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::console::LastTime>* PrepareAsyncGetLastTimeRaw(::grpc::ClientContext* context, const ::console::InstrumentSimple& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListInstrument_;
    const ::grpc::internal::RpcMethod rpcmethod_StartInstrument_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLastTime_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // rpc GetAccountId(Request) returns (stream AccountId){}
    virtual ::grpc::Status ListInstrument(::grpc::ServerContext* context, const ::console::Request* request, ::grpc::ServerWriter< ::console::Instrument>* writer);
    virtual ::grpc::Status StartInstrument(::grpc::ServerContext* context, const ::console::InstrumentSimple* request, ::console::InstrumentReply* response);
    virtual ::grpc::Status GetLastTime(::grpc::ServerContext* context, const ::console::InstrumentSimple* request, ::grpc::ServerWriter< ::console::LastTime>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListInstrument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListInstrument() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListInstrument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstrument(::grpc::ServerContext* context, const ::console::Request* request, ::grpc::ServerWriter< ::console::Instrument>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListInstrument(::grpc::ServerContext* context, ::console::Request* request, ::grpc::ServerAsyncWriter< ::console::Instrument>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartInstrument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StartInstrument() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StartInstrument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartInstrument(::grpc::ServerContext* context, const ::console::InstrumentSimple* request, ::console::InstrumentReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartInstrument(::grpc::ServerContext* context, ::console::InstrumentSimple* request, ::grpc::ServerAsyncResponseWriter< ::console::InstrumentReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLastTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetLastTime() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetLastTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastTime(::grpc::ServerContext* context, const ::console::InstrumentSimple* request, ::grpc::ServerWriter< ::console::LastTime>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastTime(::grpc::ServerContext* context, ::console::InstrumentSimple* request, ::grpc::ServerAsyncWriter< ::console::LastTime>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListInstrument<WithAsyncMethod_StartInstrument<WithAsyncMethod_GetLastTime<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListInstrument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListInstrument() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListInstrument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstrument(::grpc::ServerContext* context, const ::console::Request* request, ::grpc::ServerWriter< ::console::Instrument>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartInstrument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StartInstrument() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StartInstrument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartInstrument(::grpc::ServerContext* context, const ::console::InstrumentSimple* request, ::console::InstrumentReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLastTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetLastTime() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetLastTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastTime(::grpc::ServerContext* context, const ::console::InstrumentSimple* request, ::grpc::ServerWriter< ::console::LastTime>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartInstrument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StartInstrument() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::console::InstrumentSimple, ::console::InstrumentReply>(std::bind(&WithStreamedUnaryMethod_StartInstrument<BaseClass>::StreamedStartInstrument, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StartInstrument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartInstrument(::grpc::ServerContext* context, const ::console::InstrumentSimple* request, ::console::InstrumentReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartInstrument(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::console::InstrumentSimple,::console::InstrumentReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartInstrument<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ListInstrument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_ListInstrument() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::console::Request, ::console::Instrument>(std::bind(&WithSplitStreamingMethod_ListInstrument<BaseClass>::StreamedListInstrument, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ListInstrument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListInstrument(::grpc::ServerContext* context, const ::console::Request* request, ::grpc::ServerWriter< ::console::Instrument>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListInstrument(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::console::Request,::console::Instrument>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetLastTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetLastTime() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::console::InstrumentSimple, ::console::LastTime>(std::bind(&WithSplitStreamingMethod_GetLastTime<BaseClass>::StreamedGetLastTime, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetLastTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLastTime(::grpc::ServerContext* context, const ::console::InstrumentSimple* request, ::grpc::ServerWriter< ::console::LastTime>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetLastTime(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::console::InstrumentSimple,::console::LastTime>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ListInstrument<WithSplitStreamingMethod_GetLastTime<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_ListInstrument<WithStreamedUnaryMethod_StartInstrument<WithSplitStreamingMethod_GetLastTime<Service > > > StreamedService;
};

}  // namespace console


#endif  // GRPC_console_2eproto__INCLUDED
