// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: console.proto

#include "console.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace console {
class LastTimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LastTime>
      _instance;
} _LastTime_default_instance_;
class InstrumentSimpleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InstrumentSimple>
      _instance;
} _InstrumentSimple_default_instance_;
class InstrumentReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InstrumentReply>
      _instance;
} _InstrumentReply_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request>
      _instance;
} _Request_default_instance_;
class InstrumentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Instrument>
      _instance;
} _Instrument_default_instance_;
}  // namespace console
namespace protobuf_console_2eproto {
void InitDefaultsLastTimeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::console::_LastTime_default_instance_;
    new (ptr) ::console::LastTime();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::console::LastTime::InitAsDefaultInstance();
}

void InitDefaultsLastTime() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLastTimeImpl);
}

void InitDefaultsInstrumentSimpleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::console::_InstrumentSimple_default_instance_;
    new (ptr) ::console::InstrumentSimple();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::console::InstrumentSimple::InitAsDefaultInstance();
}

void InitDefaultsInstrumentSimple() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInstrumentSimpleImpl);
}

void InitDefaultsInstrumentReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::console::_InstrumentReply_default_instance_;
    new (ptr) ::console::InstrumentReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::console::InstrumentReply::InitAsDefaultInstance();
}

void InitDefaultsInstrumentReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInstrumentReplyImpl);
}

void InitDefaultsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::console::_Request_default_instance_;
    new (ptr) ::console::Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::console::Request::InitAsDefaultInstance();
}

void InitDefaultsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestImpl);
}

void InitDefaultsInstrumentImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::console::_Instrument_default_instance_;
    new (ptr) ::console::Instrument();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::console::Instrument::InitAsDefaultInstance();
}

void InitDefaultsInstrument() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInstrumentImpl);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::LastTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::LastTime, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::LastTime, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::LastTime, scale_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::InstrumentSimple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::InstrumentSimple, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::InstrumentReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::InstrumentReply, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::Instrument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::Instrument, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::Instrument, displayprecision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::Instrument, marginrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::Instrument, maximumorderunits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::Instrument, maximumpositionsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::Instrument, maximumtrailingstopdistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::Instrument, minimumtradesize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::Instrument, minimumtrailingstopdistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::Instrument, piplocation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::Instrument, tradeunitsprecision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::Instrument, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::console::Instrument, online_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::console::LastTime)},
  { 8, -1, sizeof(::console::InstrumentSimple)},
  { 14, -1, sizeof(::console::InstrumentReply)},
  { 20, -1, sizeof(::console::Request)},
  { 25, -1, sizeof(::console::Instrument)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::console::_LastTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::console::_InstrumentSimple_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::console::_InstrumentReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::console::_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::console::_Instrument_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "console.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rconsole.proto\022\007console\"4\n\010LastTime\022\013\n\003"
      "Tag\030\001 \001(\t\022\014\n\004time\030\002 \001(\003\022\r\n\005Scale\030\003 \001(\003\" "
      "\n\020InstrumentSimple\022\014\n\004Name\030\001 \001(\t\" \n\017Inst"
      "rumentReply\022\r\n\005State\030\001 \001(\010\"\t\n\007Request\"\264\002"
      "\n\nInstrument\022\014\n\004Name\030\001 \001(\t\022\030\n\020DisplayPre"
      "cision\030\002 \001(\001\022\022\n\nMarginRate\030\003 \001(\001\022\031\n\021Maxi"
      "mumOrderUnits\030\004 \001(\001\022\033\n\023MaximumPositionSi"
      "ze\030\005 \001(\001\022#\n\033MaximumTrailingStopDistance\030"
      "\006 \001(\001\022\030\n\020MinimumTradeSize\030\007 \001(\001\022#\n\033Minim"
      "umTrailingStopDistance\030\010 \001(\001\022\023\n\013PipLocat"
      "ion\030\t \001(\001\022\033\n\023TradeUnitsPrecision\030\n \001(\001\022\014"
      "\n\004Type\030\013 \001(\t\022\016\n\006Online\030\014 \001(\0102\321\001\n\007Greeter"
      "\022;\n\016ListInstrument\022\020.console.Request\032\023.c"
      "onsole.Instrument\"\0000\001\022H\n\017StartInstrument"
      "\022\031.console.InstrumentSimple\032\030.console.In"
      "strumentReply\"\000\022\?\n\013GetLastTime\022\031.console"
      ".InstrumentSimple\032\021.console.LastTime\"\0000\001"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 688);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "console.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_console_2eproto
namespace console {

// ===================================================================

void LastTime::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LastTime::kTagFieldNumber;
const int LastTime::kTimeFieldNumber;
const int LastTime::kScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LastTime::LastTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_console_2eproto::InitDefaultsLastTime();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:console.LastTime)
}
LastTime::LastTime(const LastTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tag().size() > 0) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&time_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:console.LastTime)
}

void LastTime::SharedCtor() {
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&time_)) + sizeof(scale_));
  _cached_size_ = 0;
}

LastTime::~LastTime() {
  // @@protoc_insertion_point(destructor:console.LastTime)
  SharedDtor();
}

void LastTime::SharedDtor() {
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LastTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LastTime::descriptor() {
  ::protobuf_console_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_console_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LastTime& LastTime::default_instance() {
  ::protobuf_console_2eproto::InitDefaultsLastTime();
  return *internal_default_instance();
}

LastTime* LastTime::New(::google::protobuf::Arena* arena) const {
  LastTime* n = new LastTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LastTime::Clear() {
// @@protoc_insertion_point(message_clear_start:console.LastTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&time_)) + sizeof(scale_));
  _internal_metadata_.Clear();
}

bool LastTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:console.LastTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "console.LastTime.Tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Scale = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:console.LastTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:console.LastTime)
  return false;
#undef DO_
}

void LastTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:console.LastTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Tag = 1;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "console.LastTime.Tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag(), output);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // int64 Scale = 3;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->scale(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:console.LastTime)
}

::google::protobuf::uint8* LastTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:console.LastTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Tag = 1;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "console.LastTime.Tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // int64 Scale = 3;
  if (this->scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->scale(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:console.LastTime)
  return target;
}

size_t LastTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:console.LastTime)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Tag = 1;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag());
  }

  // int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // int64 Scale = 3;
  if (this->scale() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->scale());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LastTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:console.LastTime)
  GOOGLE_DCHECK_NE(&from, this);
  const LastTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LastTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:console.LastTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:console.LastTime)
    MergeFrom(*source);
  }
}

void LastTime::MergeFrom(const LastTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:console.LastTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
}

void LastTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:console.LastTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastTime::CopyFrom(const LastTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:console.LastTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastTime::IsInitialized() const {
  return true;
}

void LastTime::Swap(LastTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LastTime::InternalSwap(LastTime* other) {
  using std::swap;
  tag_.Swap(&other->tag_);
  swap(time_, other->time_);
  swap(scale_, other->scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LastTime::GetMetadata() const {
  protobuf_console_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_console_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InstrumentSimple::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstrumentSimple::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstrumentSimple::InstrumentSimple()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_console_2eproto::InitDefaultsInstrumentSimple();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:console.InstrumentSimple)
}
InstrumentSimple::InstrumentSimple(const InstrumentSimple& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:console.InstrumentSimple)
}

void InstrumentSimple::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

InstrumentSimple::~InstrumentSimple() {
  // @@protoc_insertion_point(destructor:console.InstrumentSimple)
  SharedDtor();
}

void InstrumentSimple::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InstrumentSimple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrumentSimple::descriptor() {
  ::protobuf_console_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_console_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InstrumentSimple& InstrumentSimple::default_instance() {
  ::protobuf_console_2eproto::InitDefaultsInstrumentSimple();
  return *internal_default_instance();
}

InstrumentSimple* InstrumentSimple::New(::google::protobuf::Arena* arena) const {
  InstrumentSimple* n = new InstrumentSimple;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstrumentSimple::Clear() {
// @@protoc_insertion_point(message_clear_start:console.InstrumentSimple)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool InstrumentSimple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:console.InstrumentSimple)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "console.InstrumentSimple.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:console.InstrumentSimple)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:console.InstrumentSimple)
  return false;
#undef DO_
}

void InstrumentSimple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:console.InstrumentSimple)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "console.InstrumentSimple.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:console.InstrumentSimple)
}

::google::protobuf::uint8* InstrumentSimple::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:console.InstrumentSimple)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "console.InstrumentSimple.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:console.InstrumentSimple)
  return target;
}

size_t InstrumentSimple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:console.InstrumentSimple)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrumentSimple::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:console.InstrumentSimple)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentSimple* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InstrumentSimple>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:console.InstrumentSimple)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:console.InstrumentSimple)
    MergeFrom(*source);
  }
}

void InstrumentSimple::MergeFrom(const InstrumentSimple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:console.InstrumentSimple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void InstrumentSimple::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:console.InstrumentSimple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentSimple::CopyFrom(const InstrumentSimple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:console.InstrumentSimple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentSimple::IsInitialized() const {
  return true;
}

void InstrumentSimple::Swap(InstrumentSimple* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstrumentSimple::InternalSwap(InstrumentSimple* other) {
  using std::swap;
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstrumentSimple::GetMetadata() const {
  protobuf_console_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_console_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InstrumentReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstrumentReply::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstrumentReply::InstrumentReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_console_2eproto::InitDefaultsInstrumentReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:console.InstrumentReply)
}
InstrumentReply::InstrumentReply(const InstrumentReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:console.InstrumentReply)
}

void InstrumentReply::SharedCtor() {
  state_ = false;
  _cached_size_ = 0;
}

InstrumentReply::~InstrumentReply() {
  // @@protoc_insertion_point(destructor:console.InstrumentReply)
  SharedDtor();
}

void InstrumentReply::SharedDtor() {
}

void InstrumentReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrumentReply::descriptor() {
  ::protobuf_console_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_console_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InstrumentReply& InstrumentReply::default_instance() {
  ::protobuf_console_2eproto::InitDefaultsInstrumentReply();
  return *internal_default_instance();
}

InstrumentReply* InstrumentReply::New(::google::protobuf::Arena* arena) const {
  InstrumentReply* n = new InstrumentReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstrumentReply::Clear() {
// @@protoc_insertion_point(message_clear_start:console.InstrumentReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = false;
  _internal_metadata_.Clear();
}

bool InstrumentReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:console.InstrumentReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool State = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:console.InstrumentReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:console.InstrumentReply)
  return false;
#undef DO_
}

void InstrumentReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:console.InstrumentReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool State = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:console.InstrumentReply)
}

::google::protobuf::uint8* InstrumentReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:console.InstrumentReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool State = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:console.InstrumentReply)
  return target;
}

size_t InstrumentReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:console.InstrumentReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool State = 1;
  if (this->state() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrumentReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:console.InstrumentReply)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InstrumentReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:console.InstrumentReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:console.InstrumentReply)
    MergeFrom(*source);
  }
}

void InstrumentReply::MergeFrom(const InstrumentReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:console.InstrumentReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    set_state(from.state());
  }
}

void InstrumentReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:console.InstrumentReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentReply::CopyFrom(const InstrumentReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:console.InstrumentReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentReply::IsInitialized() const {
  return true;
}

void InstrumentReply::Swap(InstrumentReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstrumentReply::InternalSwap(InstrumentReply* other) {
  using std::swap;
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstrumentReply::GetMetadata() const {
  protobuf_console_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_console_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_console_2eproto::InitDefaultsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:console.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:console.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:console.Request)
  SharedDtor();
}

void Request::SharedDtor() {
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  ::protobuf_console_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_console_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request& Request::default_instance() {
  ::protobuf_console_2eproto::InitDefaultsRequest();
  return *internal_default_instance();
}

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:console.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:console.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:console.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:console.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:console.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:console.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:console.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:console.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:console.Request)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:console.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:console.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:console.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:console.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:console.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:console.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_console_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_console_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Instrument::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Instrument::kNameFieldNumber;
const int Instrument::kDisplayPrecisionFieldNumber;
const int Instrument::kMarginRateFieldNumber;
const int Instrument::kMaximumOrderUnitsFieldNumber;
const int Instrument::kMaximumPositionSizeFieldNumber;
const int Instrument::kMaximumTrailingStopDistanceFieldNumber;
const int Instrument::kMinimumTradeSizeFieldNumber;
const int Instrument::kMinimumTrailingStopDistanceFieldNumber;
const int Instrument::kPipLocationFieldNumber;
const int Instrument::kTradeUnitsPrecisionFieldNumber;
const int Instrument::kTypeFieldNumber;
const int Instrument::kOnlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Instrument::Instrument()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_console_2eproto::InitDefaultsInstrument();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:console.Instrument)
}
Instrument::Instrument(const Instrument& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  ::memcpy(&displayprecision_, &from.displayprecision_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&displayprecision_)) + sizeof(online_));
  // @@protoc_insertion_point(copy_constructor:console.Instrument)
}

void Instrument::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&displayprecision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&displayprecision_)) + sizeof(online_));
  _cached_size_ = 0;
}

Instrument::~Instrument() {
  // @@protoc_insertion_point(destructor:console.Instrument)
  SharedDtor();
}

void Instrument::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Instrument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Instrument::descriptor() {
  ::protobuf_console_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_console_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Instrument& Instrument::default_instance() {
  ::protobuf_console_2eproto::InitDefaultsInstrument();
  return *internal_default_instance();
}

Instrument* Instrument::New(::google::protobuf::Arena* arena) const {
  Instrument* n = new Instrument;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Instrument::Clear() {
// @@protoc_insertion_point(message_clear_start:console.Instrument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&displayprecision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&displayprecision_)) + sizeof(online_));
  _internal_metadata_.Clear();
}

bool Instrument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:console.Instrument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "console.Instrument.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double DisplayPrecision = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &displayprecision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double MarginRate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double MaximumOrderUnits = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maximumorderunits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double MaximumPositionSize = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maximumpositionsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double MaximumTrailingStopDistance = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maximumtrailingstopdistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double MinimumTradeSize = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimumtradesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double MinimumTrailingStopDistance = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimumtrailingstopdistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double PipLocation = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &piplocation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double TradeUnitsPrecision = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tradeunitsprecision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "console.Instrument.Type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Online = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:console.Instrument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:console.Instrument)
  return false;
#undef DO_
}

void Instrument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:console.Instrument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "console.Instrument.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // double DisplayPrecision = 2;
  if (this->displayprecision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->displayprecision(), output);
  }

  // double MarginRate = 3;
  if (this->marginrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->marginrate(), output);
  }

  // double MaximumOrderUnits = 4;
  if (this->maximumorderunits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->maximumorderunits(), output);
  }

  // double MaximumPositionSize = 5;
  if (this->maximumpositionsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->maximumpositionsize(), output);
  }

  // double MaximumTrailingStopDistance = 6;
  if (this->maximumtrailingstopdistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->maximumtrailingstopdistance(), output);
  }

  // double MinimumTradeSize = 7;
  if (this->minimumtradesize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->minimumtradesize(), output);
  }

  // double MinimumTrailingStopDistance = 8;
  if (this->minimumtrailingstopdistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->minimumtrailingstopdistance(), output);
  }

  // double PipLocation = 9;
  if (this->piplocation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->piplocation(), output);
  }

  // double TradeUnitsPrecision = 10;
  if (this->tradeunitsprecision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->tradeunitsprecision(), output);
  }

  // string Type = 11;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "console.Instrument.Type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->type(), output);
  }

  // bool Online = 12;
  if (this->online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->online(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:console.Instrument)
}

::google::protobuf::uint8* Instrument::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:console.Instrument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "console.Instrument.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // double DisplayPrecision = 2;
  if (this->displayprecision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->displayprecision(), target);
  }

  // double MarginRate = 3;
  if (this->marginrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->marginrate(), target);
  }

  // double MaximumOrderUnits = 4;
  if (this->maximumorderunits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->maximumorderunits(), target);
  }

  // double MaximumPositionSize = 5;
  if (this->maximumpositionsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->maximumpositionsize(), target);
  }

  // double MaximumTrailingStopDistance = 6;
  if (this->maximumtrailingstopdistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->maximumtrailingstopdistance(), target);
  }

  // double MinimumTradeSize = 7;
  if (this->minimumtradesize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->minimumtradesize(), target);
  }

  // double MinimumTrailingStopDistance = 8;
  if (this->minimumtrailingstopdistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->minimumtrailingstopdistance(), target);
  }

  // double PipLocation = 9;
  if (this->piplocation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->piplocation(), target);
  }

  // double TradeUnitsPrecision = 10;
  if (this->tradeunitsprecision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->tradeunitsprecision(), target);
  }

  // string Type = 11;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "console.Instrument.Type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->type(), target);
  }

  // bool Online = 12;
  if (this->online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->online(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:console.Instrument)
  return target;
}

size_t Instrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:console.Instrument)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string Type = 11;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // double DisplayPrecision = 2;
  if (this->displayprecision() != 0) {
    total_size += 1 + 8;
  }

  // double MarginRate = 3;
  if (this->marginrate() != 0) {
    total_size += 1 + 8;
  }

  // double MaximumOrderUnits = 4;
  if (this->maximumorderunits() != 0) {
    total_size += 1 + 8;
  }

  // double MaximumPositionSize = 5;
  if (this->maximumpositionsize() != 0) {
    total_size += 1 + 8;
  }

  // double MaximumTrailingStopDistance = 6;
  if (this->maximumtrailingstopdistance() != 0) {
    total_size += 1 + 8;
  }

  // double MinimumTradeSize = 7;
  if (this->minimumtradesize() != 0) {
    total_size += 1 + 8;
  }

  // double MinimumTrailingStopDistance = 8;
  if (this->minimumtrailingstopdistance() != 0) {
    total_size += 1 + 8;
  }

  // double PipLocation = 9;
  if (this->piplocation() != 0) {
    total_size += 1 + 8;
  }

  // double TradeUnitsPrecision = 10;
  if (this->tradeunitsprecision() != 0) {
    total_size += 1 + 8;
  }

  // bool Online = 12;
  if (this->online() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Instrument::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:console.Instrument)
  GOOGLE_DCHECK_NE(&from, this);
  const Instrument* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Instrument>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:console.Instrument)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:console.Instrument)
    MergeFrom(*source);
  }
}

void Instrument::MergeFrom(const Instrument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:console.Instrument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.displayprecision() != 0) {
    set_displayprecision(from.displayprecision());
  }
  if (from.marginrate() != 0) {
    set_marginrate(from.marginrate());
  }
  if (from.maximumorderunits() != 0) {
    set_maximumorderunits(from.maximumorderunits());
  }
  if (from.maximumpositionsize() != 0) {
    set_maximumpositionsize(from.maximumpositionsize());
  }
  if (from.maximumtrailingstopdistance() != 0) {
    set_maximumtrailingstopdistance(from.maximumtrailingstopdistance());
  }
  if (from.minimumtradesize() != 0) {
    set_minimumtradesize(from.minimumtradesize());
  }
  if (from.minimumtrailingstopdistance() != 0) {
    set_minimumtrailingstopdistance(from.minimumtrailingstopdistance());
  }
  if (from.piplocation() != 0) {
    set_piplocation(from.piplocation());
  }
  if (from.tradeunitsprecision() != 0) {
    set_tradeunitsprecision(from.tradeunitsprecision());
  }
  if (from.online() != 0) {
    set_online(from.online());
  }
}

void Instrument::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:console.Instrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instrument::CopyFrom(const Instrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:console.Instrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instrument::IsInitialized() const {
  return true;
}

void Instrument::Swap(Instrument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Instrument::InternalSwap(Instrument* other) {
  using std::swap;
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  swap(displayprecision_, other->displayprecision_);
  swap(marginrate_, other->marginrate_);
  swap(maximumorderunits_, other->maximumorderunits_);
  swap(maximumpositionsize_, other->maximumpositionsize_);
  swap(maximumtrailingstopdistance_, other->maximumtrailingstopdistance_);
  swap(minimumtradesize_, other->minimumtradesize_);
  swap(minimumtrailingstopdistance_, other->minimumtrailingstopdistance_);
  swap(piplocation_, other->piplocation_);
  swap(tradeunitsprecision_, other->tradeunitsprecision_);
  swap(online_, other->online_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Instrument::GetMetadata() const {
  protobuf_console_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_console_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace console

// @@protoc_insertion_point(global_scope)
